name: SonarCloud - Frontend test and analysis (CI)

# Déclencheurs du workflow
on:
  push:
    branches:
      - main  # Déclenche le workflow sur les pushs vers la branche main
  pull_request:
    types: [opened, synchronize, reopened]  # Déclenche le workflow sur les pull requests ouvertes, synchronisées ou rouvertes

jobs:
  frontend:
    name: Test Frontend and Analyze with SonarQube  # Nom du job
    runs-on: ubuntu-latest  # Utilise un runner GitHub avec l'image ubuntu-latest
    
    steps:
      # Étape 1: Checkout du code source
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Désactiver les clones superficiels pour une meilleure pertinence de l'analyse
          
      # Étape 2: Configuration de Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.10.0'  # Adaptez la version selon votre projet front

      # Étape 3: Configuration de JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17  # Spécifie la version de Java à utiliser
          distribution: 'zulu'  # Utilise la distribution Zulu de JDK

      # Étape 4: Cache des modules Node.js
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: front/node_modules  # Chemin du cache des modules Node.js
          key: ${{ runner.os }}-node-${{ hashFiles('front/package-lock.json') }}  # Clé pour identifier le cache, basée sur le hash du fichier package-lock.json
          restore-keys: |
            ${{ runner.os }}-node-  # Clé pour restaurer le cache

      # Étape 5: Installation des dépendances
      - name: Install dependencies
        working-directory: front  # Spécifie le chemin du front-end
        run: npm ci  # Installe les dépendances en utilisant npm ci

      # Étape 6: Installation de Xvfb
      - name: Install Xvfb
        run: sudo apt-get install -y xvfb  # Installe Xvfb, un serveur d'affichage virtuel

      # Étape 7: Démarrage de Xvfb
      - name: Start Xvfb
        run: |
          Xvfb :99 &  # Lance un serveur d'affichage virtuel
          export DISPLAY=:99  # Définit la variable d'environnement DISPLAY pour Chrome

      # Étape 8: Exécution des tests
      - name: Run tests
        working-directory: front  # Spécifie le chemin du front-end
        run: npm run test:prod  # Lancer les tests en mode headless

      # Étape 9: Analyse SonarQube pour le frontend
      - name: Run SonarQube Analysis for Frontend
        working-directory: front  # Spécifie le chemin du front-end
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}  # Jeton d'accès pour SonarCloud
          JAVA_HOME: ${{ env.JAVA_HOME_17_X64 }}  # Chemin vers JDK 17
        run: |
          npx sonar-scanner \
          -Dsonar.projectKey=did-bdx_OCP10-frontend \
          -Dsonar.sources=. \
          -Dsonar.projectName=OCP10-frontend \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.organization=did-bdx \
          -Dsonar.token=${{ secrets.SONAR_TOKEN_FRONTEND }} \
          -Dsonar.javascript.lcov.reportPaths=coverage/bobapp/lcov.info  # Chemin vers le rapport de couverture LCOV

      # Étape 10: Lister les fichiers de couverture
      - name: List coverage files
        working-directory: front  # Spécifie le chemin du front-end
        run: ls -l coverage/bobapp  # Liste les fichiers dans le répertoire de couverture

      # Étape 11: Upload des résultats de test frontend
      - name: Upload frontend test results
        if: always() 
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results  # Nom de l'artifact
          path: front/coverage/bobapp  # Chemin des résultats de test